=begin
#WebScraping.AI

#A client for https://webscraping.ai API. It provides Chrome JS rendering, rotating proxies and HTML parsing for web scraping.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module WebScrapingAI
  class HtmlApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get page HTML by URL (renders JS in Chrome and uses rotating proxies)
    # @param url [String] URL of the page to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :selector CSS selector to get a part of the page (null by default, returns whole page HTML)
    # @option opts [Boolean] :outer_html Return outer HTML of the selected element (false by default, returns inner HTML)
    # @option opts [String] :proxy Proxy country code, for geotargeting (US by default)
    # @option opts [Boolean] :disable_js Disable JS execution (false by default)
    # @option opts [Boolean] :inline_css Inline included CSS files to make page viewable on other domains (false by default)
    # @return [ScrappedPage]
    def get_page(url, opts = {})
      data, _status_code, _headers = get_page_with_http_info(url, opts)
      data
    end

    # Get page HTML by URL (renders JS in Chrome and uses rotating proxies)
    # @param url [String] URL of the page to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :selector CSS selector to get a part of the page (null by default, returns whole page HTML)
    # @option opts [Boolean] :outer_html Return outer HTML of the selected element (false by default, returns inner HTML)
    # @option opts [String] :proxy Proxy country code, for geotargeting (US by default)
    # @option opts [Boolean] :disable_js Disable JS execution (false by default)
    # @option opts [Boolean] :inline_css Inline included CSS files to make page viewable on other domains (false by default)
    # @return [Array<(ScrappedPage, Integer, Hash)>] ScrappedPage data, response status code and response headers
    def get_page_with_http_info(url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HtmlApi.get_page ...'
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling HtmlApi.get_page"
      end
      # resource path
      local_var_path = '/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = url
      query_params[:'selector'] = opts[:'selector'] if !opts[:'selector'].nil?
      query_params[:'outer_html'] = opts[:'outer_html'] if !opts[:'outer_html'].nil?
      query_params[:'proxy'] = opts[:'proxy'] if !opts[:'proxy'].nil?
      query_params[:'disable_js'] = opts[:'disable_js'] if !opts[:'disable_js'].nil?
      query_params[:'inline_css'] = opts[:'inline_css'] if !opts[:'inline_css'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ScrappedPage' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HtmlApi#get_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
