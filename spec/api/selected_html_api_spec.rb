=begin
#WebScraping.AI

#A client for https://webscraping.ai API. It provides a web scaping automation API with Chrome JS rendering, rotating proxies and builtin HTML parsing.

The version of the OpenAPI document: 2.0.2
Contact: support@webscraping.ai
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for WebScrapingAI::SelectedHTMLApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'SelectedHTMLApi' do
  before do
    # run before each test
    @api_instance = WebScrapingAI::SelectedHTMLApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SelectedHTMLApi' do
    it 'should create an instance of SelectedHTMLApi' do
      expect(@api_instance).to be_instance_of(WebScrapingAI::SelectedHTMLApi)
    end
  end

  # unit tests for get_selected
  # HTML of a selected page area by URL and CSS selector
  # Returns just HTML on success, JSON on error
  # @param url URL of the target page
  # @param [Hash] opts the optional parameters
  # @option opts [String] :selector CSS selector (null by default, returns whole page HTML)
  # @option opts [Hash<String, String>] :headers HTTP headers to pass to the target page. Can be specified either via a nested query parameter (...&amp;headers[One]&#x3D;value1&amp;headers&#x3D;[Another]&#x3D;value2) or as a JSON encoded object (...&amp;headers&#x3D;{\&quot;One\&quot;: \&quot;value1\&quot;, \&quot;Another\&quot;: \&quot;value2\&quot;})
  # @option opts [Integer] :timeout Maximum processing time in ms. Increase it in case of timeout errors (5000 by default, maximum is 30000)
  # @option opts [Boolean] :js Execute on-page JavaScript using a headless browser (true by default), costs 2 requests
  # @option opts [String] :proxy Type of proxy, use residential proxies if your site restricts traffic from datacenters (datacenter by default)
  # @return [String]
  describe 'get_selected test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_selected_multiple
  # HTML of multiple page areas by URL and CSS selectors
  # Always returns JSON
  # @param url URL of the target page
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :selectors Multiple CSS selectors (null by default, returns whole page HTML)
  # @option opts [Hash<String, String>] :headers HTTP headers to pass to the target page. Can be specified either via a nested query parameter (...&amp;headers[One]&#x3D;value1&amp;headers&#x3D;[Another]&#x3D;value2) or as a JSON encoded object (...&amp;headers&#x3D;{\&quot;One\&quot;: \&quot;value1\&quot;, \&quot;Another\&quot;: \&quot;value2\&quot;})
  # @option opts [Integer] :timeout Maximum processing time in ms. Increase it in case of timeout errors (5000 by default, maximum is 30000)
  # @option opts [Boolean] :js Execute on-page JavaScript using a headless browser (true by default), costs 2 requests
  # @option opts [String] :proxy Type of proxy, use residential proxies if your site restricts traffic from datacenters (datacenter by default)
  # @return [Array<String>]
  describe 'get_selected_multiple test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_selected
  # HTML of a selected page areas by URL and CSS selector, with POST request to the target page
  # Returns just HTML on success, JSON on error. Request body will be passed to the target page.
  # @param url URL of the target page
  # @param [Hash] opts the optional parameters
  # @option opts [String] :selector CSS selector (null by default, returns whole page HTML)
  # @option opts [Hash<String, String>] :headers HTTP headers to pass to the target page. Can be specified either via a nested query parameter (...&amp;headers[One]&#x3D;value1&amp;headers&#x3D;[Another]&#x3D;value2) or as a JSON encoded object (...&amp;headers&#x3D;{\&quot;One\&quot;: \&quot;value1\&quot;, \&quot;Another\&quot;: \&quot;value2\&quot;})
  # @option opts [Integer] :timeout Maximum processing time in ms. Increase it in case of timeout errors (5000 by default, maximum is 30000)
  # @option opts [Boolean] :js Execute on-page JavaScript using a headless browser (true by default), costs 2 requests
  # @option opts [String] :proxy Type of proxy, use residential proxies if your site restricts traffic from datacenters (datacenter by default)
  # @option opts [Hash<String, Object>] :request_body Request body to pass to the target page
  # @return [String]
  describe 'post_selected test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_selected_multiple
  # HTML of multiple page areas by URL and CSS selectors, with POST request to the target page
  # Always returns JSON. Request body will be passed to the target page.
  # @param url URL of the target page
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :selectors Multiple CSS selectors (null by default, returns whole page HTML)
  # @option opts [Hash<String, String>] :headers HTTP headers to pass to the target page. Can be specified either via a nested query parameter (...&amp;headers[One]&#x3D;value1&amp;headers&#x3D;[Another]&#x3D;value2) or as a JSON encoded object (...&amp;headers&#x3D;{\&quot;One\&quot;: \&quot;value1\&quot;, \&quot;Another\&quot;: \&quot;value2\&quot;})
  # @option opts [Integer] :timeout Maximum processing time in ms. Increase it in case of timeout errors (5000 by default, maximum is 30000)
  # @option opts [Boolean] :js Execute on-page JavaScript using a headless browser (true by default), costs 2 requests
  # @option opts [String] :proxy Type of proxy, use residential proxies if your site restricts traffic from datacenters (datacenter by default)
  # @option opts [Hash<String, Object>] :request_body Request body to pass to the target page
  # @return [Array<String>]
  describe 'post_selected_multiple test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
